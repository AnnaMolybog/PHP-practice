<?php

namespace Tests\AppBundle\Controller;

use AppBundle\Entity\Batteries;
use AppBundle\Entity\Type;
use AppBundle\Wrapper\StatisticResultWrapper;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Bundle\FrameworkBundle\Client;
use Symfony\Component\HttpFoundation\Request;
use AppBundle\Service\BatteriesService;

class DefaultControllerTest extends WebTestCase
{
    const ADD_BATTERY_URL = '/add-battery';
    const STATISTIC_PAGE_URL = '/';

    /**
     * @var Client
     */
    private $client;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->client = static::createClient();
    }

    public function testAddBatteriesSuccess()
    {
        $crawler = $this->client->request(Request::METHOD_POST, self::ADD_BATTERY_URL);
        $this->client->disableReboot();

        $batteriesServiceMock = $this->getBatteriesServiceMock();
        $batteriesServiceMock->expects($this->once())
            ->method('save')
            ->willReturn($this->batteriesEntity());

        $this->client->getContainer()->set('service.batteries_service', $batteriesServiceMock);

        $form = $crawler->selectButton('Save')->form();

        $form->all()["batteries_from[type]"]->select(1);
        $form->all()["batteries_from[count]"]->setValue(24);
        $form->all()["batteries_from[name]"]->setValue('Anna');

        $this->client->request(Request::METHOD_POST, self::ADD_BATTERY_URL, $form->getPhpValues());

        $this->assertEquals(302, $this->client->getResponse()->getStatusCode());
    }

    public function testAddBatteriesFailed()
    {
        $crawler = $this->client->request(Request::METHOD_POST, self::ADD_BATTERY_URL);
        $this->client->disableReboot();

        $batteriesServiceMock = $this->getBatteriesServiceMock();
        $batteriesServiceMock->expects($this->once())
            ->method('save')
            ->willThrowException(new \Exception);

        $this->client->getContainer()->set('service.batteries_service', $batteriesServiceMock);
        $form = $crawler->selectButton('Save')->form();
        $form->all()["batteries_from[type]"]->select(1);
        $form->all()["batteries_from[count]"]->setValue(24);
        $form->all()["batteries_from[name]"]->setValue('Anna');

        $this->client->request(Request::METHOD_POST, self::ADD_BATTERY_URL, $form->getPhpValues());

        $this->assertEquals(302, $this->client->getResponse()->getStatusCode());
        $this->assertContains(self::ADD_BATTERY_URL, $this->client->getResponse()->getContent());
    }

    public function testStatistic()
    {
        $batteriesServiceMock = $this->getBatteriesServiceMock();
        $batteriesServiceMock->expects($this->once())
            ->method('getStatistic')
            ->willReturn([$this->statisticResult()]);
        $this->client->getContainer()->set('service.batteries_service', $batteriesServiceMock);

        $crawler = $this->client->request(Request::METHOD_GET, self::STATISTIC_PAGE_URL);

        $this->assertContains('24', $crawler->filter('#statistic-table tbody tr td:nth-child(2)')->text());
        $this->assertContains('AAA', $crawler->filter('#statistic-table tbody tr td:first-of-type')->text());
    }

    private function getBatteriesServiceMock()
    {
        return $batteriesServiceMock = $this->getMockBuilder(BatteriesService::class)
            ->disableOriginalConstructor()
            ->getMock();
    }

    private function batteriesEntity()
    {
        $batteriesEntity = new Batteries();
        return $batteriesEntity
            ->setCount(24)
            ->setName('Anna')
            ->setType($this->typeEntity());
    }

    private function typeEntity()
    {
        $typeEntity = new Type();
        return $typeEntity->setTypeName('AAA');
    }

    private function statisticResult()
    {
        $statisticWrapper = new StatisticResultWrapper();
        return $statisticWrapper
            ->setBattery($this->batteriesEntity())
            ->setQuantity($this->batteriesEntity()->getCount());
    }
}
